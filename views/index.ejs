<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Image Nudifier</title>
    <link rel="stylesheet" href="/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
    <h1>Image Nudifier</h1>

    <form id="uploadForm" enctype="multipart/form-data">
        <p id="queueStatus">Queue: <span id="queueSize">0</span>, Status: <span id="processingStatus">Idle</span>, Your
            Position: <span id="yourPosition">N/A</span></p>
        <div id="progressContainer" style="display:none;">
            <div id="progressBar"></div>
        </div>
        <div class="main-container">
            <div class="upload-section">
                <h2>Upload Image</h2>
                <div id="dropArea" class="drop-area image-box">
                    <p id="dropText" class="placeholder">Drag & drop or click to upload</p>
                    <img id="previewImage" />
                    <input id="inputImage" type="file" name="image" accept="image/*" />
                </div>
                <button class="upload-btn" type="submit">Upload</button>
            </div>
            <div class="output-section">
                <h2>Processed Output</h2>
                <div id="outputArea" class="image-box">
                    <p id="outputPlaceholder" class="placeholder">Your processed image will appear here.</p>
                    <img id="outputImage" src="" alt="Processed Image" style="display:none;" />
                </div>
                <a id="downloadLink" href="#" download style="display:none;">
                    <button class="download-btn" type="button">Download</button>
                </a>
            </div>
        </div>
    </form>

    <div class="settings-section">
        <h2>Settings</h2>
        <p>Future filters and options will go here.</p>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const inputImage = document.getElementById('inputImage');
        const previewImage = document.getElementById('previewImage');
        const dropArea = document.getElementById('dropArea');
        const dropText = document.getElementById('dropText');
        const uploadForm = document.getElementById('uploadForm');
        const progressBar = document.getElementById('progressBar');
        const progressContainer = document.getElementById('progressContainer');
        const outputImage = document.getElementById('outputImage');
        const outputPlaceholder = document.getElementById('outputPlaceholder');
        const downloadLink = document.getElementById('downloadLink');

        // New elements for queue display
        const queueSizeSpan = document.getElementById('queueSize');
        const processingStatusSpan = document.getElementById('processingStatus');
        const yourPositionSpan = document.getElementById('yourPosition');

        let currentRequestId = null; // Store the requestId for this client's active job
        let pollingIntervalId = null; // To store the interval ID for polling

        // --- Socket.IO Setup ---
        const socket = io(); // Connects to the server where the script is served from

        socket.on('connect', () => {
            console.log('Connected to Socket.IO server.');
            // If there's an ongoing request from a previous session (e.g., page refresh),
            // you might want to try to rejoin its room. For simplicity, we'll assume
            // new connections are for new uploads or waiting for a cleared state.
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from Socket.IO server.');
            if (pollingIntervalId) {
                clearInterval(pollingIntervalId);
                pollingIntervalId = null;
            }
        });

        // Listen for processing progress updates from the server
        socket.on('processingProgress', (progress) => {
            if (currentRequestId && processingStatusSpan.textContent === 'Processing') {
                const percentage = Math.round((progress.value / progress.max) * 100);
                progressBar.style.width = `${percentage}%`;
                progressBar.textContent = `${percentage}%`;
                outputPlaceholder.textContent = `Processing image: ${percentage}% complete...`;
                progressContainer.style.display = 'block'; // Ensure progress bar is visible
            }
        });

        // Listen for immediate queue updates (e.g., when your turn comes)
        socket.on('queueUpdate', (data) => {
            console.log('Socket.IO Queue Update:', data);
            queueSizeSpan.textContent = data.queueSize;

            if (data.requestId === currentRequestId) { // Ensure update is for our request
                if (data.status === 'processing') {
                    yourPositionSpan.textContent = 'Processing';
                    processingStatusSpan.textContent = 'Processing';
                    outputPlaceholder.textContent = 'Processing your image...';
                    progressContainer.style.display = 'block'; // Show progress bar
                    progressBar.style.width = '0%'; // Reset for new processing
                    progressBar.textContent = '0%';
                } else if (data.status === 'pending') {
                    yourPositionSpan.textContent = `${data.yourPosition}`;
                    processingStatusSpan.textContent = 'Waiting';
                    outputPlaceholder.textContent = `Waiting in queue: Position ${data.yourPosition}`;
                    progressContainer.style.display = 'none'; // Hide progress bar if pending
                }
            } else if (!currentRequestId && !data.isProcessing && data.queueSize === 0) {
                 // General update for idle state if no current request
                processingStatusSpan.textContent = 'Idle';
                yourPositionSpan.textContent = 'N/A';
            }
        });

        // Listen for processing completion
        socket.on('processingComplete', (data) => {
            if (currentRequestId) { // Check if this completion is for our request
                console.log('Socket.IO Processing complete:', data);
                yourPositionSpan.textContent = 'Done!';
                processingStatusSpan.textContent = 'Complete';
                if (data.outputImage) {
                    displayResult(data.outputImage);
                }
                currentRequestId = null; // Clear request ID
                if (pollingIntervalId) {
                    clearInterval(pollingIntervalId); // Stop polling once done
                    pollingIntervalId = null;
                }
                progressContainer.style.display = 'none'; // Hide progress bar
            }
            fetchQueueStatus(); // Fetch general queue status to update for next job
        });

        // Listen for processing failure
        socket.on('processingFailed', (data) => {
            if (currentRequestId) { // Check if this failure is for our request
                console.error('Socket.IO Processing failed:', data);
                yourPositionSpan.textContent = 'Error!';
                processingStatusSpan.textContent = 'Failed';
                displayError(data.errorMessage || 'Unknown processing error.');
                currentRequestId = null; // Clear request ID
                if (pollingIntervalId) {
                    clearInterval(pollingIntervalId); // Stop polling
                    pollingIntervalId = null;
                }
                progressContainer.style.display = 'none'; // Hide progress bar
            }
            fetchQueueStatus(); // Fetch general queue status
        });


        // --- UI Helper Functions ---
        function resetUIForNewUpload() {
            outputImage.style.display = 'none';
            outputImage.src = ''; // Clear previous image
            outputPlaceholder.style.display = 'block';
            outputPlaceholder.style.color = '#333'; // Reset color if it was red from an error
            downloadLink.style.display = 'none';
            downloadLink.href = '#';
            currentRequestId = null;
            yourPositionSpan.textContent = 'Submitting...';
            processingStatusSpan.textContent = 'Uploading...'; // Indicate upload is happening
            queueSizeSpan.textContent = '0'; // Will be updated by server response
            progressContainer.style.display = 'block'; // Show progress bar for upload
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';

            if (pollingIntervalId) { // Clear any ongoing polling interval
                clearInterval(pollingIntervalId);
                pollingIntervalId = null;
            }
        }

        function displayProcessingMessage(message) {
            outputPlaceholder.textContent = message;
            outputPlaceholder.style.display = 'block';
            outputImage.style.display = 'none';
            downloadLink.style.display = 'none';
        }

        function displayResult(imageUrl) {
            outputImage.src = imageUrl;
            outputImage.style.display = 'block';
            outputPlaceholder.style.display = 'none';

            const filename = imageUrl.split('/').pop();
            downloadLink.href = imageUrl;
            downloadLink.setAttribute('download', filename);
            downloadLink.style.display = 'inline-block';
        }

        function displayError(errorMessage) {
            outputPlaceholder.textContent = `Error: ${errorMessage}`;
            outputPlaceholder.style.color = 'red';
            outputPlaceholder.style.display = 'block';
            outputImage.style.display = 'none';
            downloadLink.style.display = 'none';
        }


        // --- Image Preview and Drag/Drop ---
        function showPreview(file) {
            const reader = new FileReader();
            reader.onload = e => {
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
                dropText.style.display = 'none';
            };
            reader.readAsDataURL(file);
        }

        inputImage.addEventListener('change', () => {
            if (inputImage.files[0]) showPreview(inputImage.files[0]);
        });

        ['dragenter', 'dragover'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.add('drag-over');
            })
        );

        ['dragleave', 'drop'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.remove('drag-over');
            })
        );

        dropArea.addEventListener('click', () => inputImage.click());

        dropArea.addEventListener('drop', e => {
            const file = e.dataTransfer.files[0];
            if (file) {
                inputImage.files = e.dataTransfer.files;
                showPreview(file);
            }
        });

        // --- Upload Form Submission ---
        uploadForm.addEventListener('submit', function (e) {
            e.preventDefault();

            if (!inputImage.files || inputImage.files.length === 0) {
                alert('Please select an image before uploading.');
                return;
            }

            resetUIForNewUpload(); // Reset UI state for a new upload

            const formData = new FormData();
            formData.append('image', inputImage.files[0]);

            const xhr = new XMLHttpRequest();

            // Set up upload progress for the file upload itself (not ComfyUI processing)
            xhr.upload.addEventListener('progress', e => {
                if (e.lengthComputable) {
                    const percent = (e.loaded / e.total) * 100;
                    progressBar.style.width = percent + '%';
                    progressBar.textContent = `Uploading: ${Math.round(percent)}%`;
                    processingStatusSpan.textContent = 'Uploading';
                }
            });

            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4) {
                    if (xhr.status === 202) { // Server accepted and enqueued
                        const response = JSON.parse(xhr.responseText);
                        currentRequestId = response.requestId; // Store the received requestId

                        // Join the Socket.IO room for this specific requestId
                        socket.emit('joinRoom', currentRequestId);

                        // Update initial queue status immediately from response
                        queueSizeSpan.textContent = response.queueSize;
                        yourPositionSpan.textContent = response.yourPosition > 0 ? response.yourPosition : 'Processing';
                        processingStatusSpan.textContent = 'Waiting for server...';

                        // Hide upload progress and reset for processing progress
                        progressBar.style.width = '0%';
                        progressBar.textContent = '0%';
                        progressContainer.style.display = 'block'; // Ensure it's ready for processing progress

                        // Start polling for overall queue status. The Socket.IO
                        // events will provide the real-time progress for *our* job.
                        if (!pollingIntervalId) {
                            pollingIntervalId = setInterval(fetchQueueStatus, 2000);
                        }
                        // Immediately fetch status after enqueuing for quick update
                        fetchQueueStatus();

                    } else { // Handle upload errors
                        alert('Upload failed: ' + xhr.responseText);
                        console.error('Upload error:', xhr.responseText);
                        displayError('Upload failed: ' + xhr.responseText);
                        currentRequestId = null; // Clear request ID on upload failure
                        if (pollingIntervalId) {
                            clearInterval(pollingIntervalId); // Stop polling if upload fails
                            pollingIntervalId = null;
                        }
                        yourPositionSpan.textContent = 'Error';
                        processingStatusSpan.textContent = 'Failed';
                        progressContainer.style.display = 'none'; // Hide progress bar on failure
                    }
                }
            };

            xhr.open('POST', '/upload', true);
            xhr.send(formData);
        });

        // --- Frontend Queue Polling ---
        async function fetchQueueStatus() {
            try {
                // If there's no active request, and we're not currently processing,
                // and the queue is empty, we can stop polling.
                // This is a general check for the entire queue.
                if (!currentRequestId && processingStatusSpan.textContent === 'Idle' && queueSizeSpan.textContent === '0') {
                    // Don't clear interval if it's not set, or if it's specifically for a requestId that might be done.
                    // Let the socket events handle completion for `currentRequestId`.
                }

                let url = '/queue-status';
                if (currentRequestId) {
                    url += `?requestId=${currentRequestId}`; // Add requestId to the query
                }

                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                // Update general queue stats
                queueSizeSpan.textContent = data.queueSize;
                processingStatusSpan.textContent = data.isProcessing ? 'Busy' : 'Idle';

                // Update 'Your Position' based on polled status if Socket.IO hasn't already done it
                if (currentRequestId && data.requestId === currentRequestId) { // Ensure update is for our request
                    switch (data.status) {
                        case 'pending':
                            yourPositionSpan.textContent = `${data.yourPosition}`;
                            outputPlaceholder.textContent = `Waiting in queue: Position ${data.yourPosition}`;
                            progressContainer.style.display = 'none'; // Hide progress bar for pending
                            break;
                        case 'processing':
                            yourPositionSpan.textContent = 'Processing';
                            outputPlaceholder.textContent = 'Processing your image...';
                            progressContainer.style.display = 'block'; // Show progress bar
                            // Progress bar percentage will be handled by Socket.IO 'processingProgress' event
                            break;
                        case 'completed':
                            yourPositionSpan.textContent = 'Done!';
                            displayResult(data.result.outputImage);
                            currentRequestId = null; // Clear the request ID as it's done
                            if (pollingIntervalId) {
                                clearInterval(pollingIntervalId); // Stop polling
                                pollingIntervalId = null;
                            }
                            progressContainer.style.display = 'none'; // Hide progress bar
                            break;
                        case 'failed':
                            yourPositionSpan.textContent = 'Error!';
                            displayError(data.result.errorMessage || 'Unknown processing error.');
                            currentRequestId = null; // Clear the request ID as it's done
                            if (pollingIntervalId) {
                                clearInterval(pollingIntervalId); // Stop polling
                                pollingIntervalId = null;
                            }
                            progressContainer.style.display = 'none'; // Hide progress bar
                            break;
                        default:
                            yourPositionSpan.textContent = 'N/A';
                            break;
                    }
                } else if (!currentRequestId && !data.isProcessing && data.queueSize === 0) {
                     // If no active request and queue is truly empty, ensure state is idle
                    processingStatusSpan.textContent = 'Idle';
                    yourPositionSpan.textContent = 'N/A';
                    if (pollingIntervalId) {
                        clearInterval(pollingIntervalId);
                        pollingIntervalId = null;
                    }
                }
            } catch (error) {
                console.error('Error fetching queue status:', error);
                queueSizeSpan.textContent = 'Error';
                processingStatusSpan.textContent = 'Error';
                yourPositionSpan.textContent = 'Error';
            }
        }

        // Initial fetch on page load and start polling if needed
        fetchQueueStatus(); // Get initial state
        if (!pollingIntervalId) {
            pollingIntervalId = setInterval(fetchQueueStatus, 2000); // Poll every 2 seconds
        }

    </script>
</body>

</html>