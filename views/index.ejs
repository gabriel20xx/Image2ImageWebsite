<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Image Nudifier</title>
    <link rel="stylesheet" href="/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
    <h1>Image Nudifier</h1>

    <form id="uploadForm" enctype="multipart/form-data">
        <p id="queueStatus">Queue: <span id="queueSize">0</span>, Status: <span id="processingStatus">Idle</span>, Your
            Position: <span id="yourPosition">N/A</span></p>
        <div id="progressContainer" style="display:none;">
            <div id="progressBar"></div>
        </div>
        <div class="main-container">
            <div class="upload-section">
                <h2>Upload Image</h2>
                <div id="dropArea" class="drop-area image-box">
                    <p id="dropText" class="placeholder">Drag & drop or click to upload</p>
                    <img id="previewImage" />
                    <input id="inputImage" type="file" name="image" accept="image/*" />
                </div>
                <button class="upload-btn" type="submit">Upload</button>
            </div>
            <div class="output-section">
                <h2>Processed Output</h2>
                <div id="outputArea" class="image-box">
                    <p id="outputPlaceholder" class="placeholder">Your processed image will appear here.</p>
                    <img id="outputImage" src="" alt="Processed Image" style="display:none;" />
                </div>
                <a id="downloadLink" href="#" download style="display:none;">
                    <button class="download-btn" type="button">Download</button>
                </a>
            </div>
        </div>
    </form>

    <div class="settings-section">
        <h2>Settings</h2>
        <p>Future filters and options will go here.</p>
    </div>

    <script>
        const inputImage = document.getElementById('inputImage');
        const previewImage = document.getElementById('previewImage');
        const dropArea = document.getElementById('dropArea');
        const dropText = document.getElementById('dropText');
        const uploadForm = document.getElementById('uploadForm');
        const progressBar = document.getElementById('progressBar');
        const progressContainer = document.getElementById('progressContainer');
        const outputImage = document.getElementById('outputImage');
        const outputPlaceholder = document.getElementById('outputPlaceholder');
        const downloadLink = document.getElementById('downloadLink');

        // New elements for queue display
        const queueSizeSpan = document.getElementById('queueSize');
        const processingStatusSpan = document.getElementById('processingStatus');
        const yourPositionSpan = document.getElementById('yourPosition');

        let currentRequestId = null; // Store the requestId for this client's active job
        let pollingIntervalId = null; // To store the interval ID for polling

        // --- UI Helper Functions ---
        function resetUIForNewUpload() {
            outputImage.style.display = 'none';
            outputImage.src = ''; // Clear previous image
            outputPlaceholder.style.display = 'block';
            downloadLink.style.display = 'none';
            downloadLink.href = '#';
            currentRequestId = null;
            yourPositionSpan.textContent = 'Submitting...';
            processingStatusSpan.textContent = 'Idle';
            queueSizeSpan.textContent = '0';
            progressContainer.style.display = 'none';
            progressBar.style.width = '0%';
        }

        function displayProcessingMessage(message) {
            outputPlaceholder.textContent = message;
            outputPlaceholder.style.display = 'block';
            outputImage.style.display = 'none';
            downloadLink.style.display = 'none';
        }

        function displayResult(imageUrl) {
            outputImage.src = imageUrl;
            outputImage.style.display = 'block';
            outputPlaceholder.style.display = 'none';

            const filename = imageUrl.split('/').pop();
            downloadLink.href = imageUrl;
            downloadLink.setAttribute('download', filename);
            downloadLink.style.display = 'inline-block';
        }

        function displayError(errorMessage) {
            outputPlaceholder.textContent = `Error: ${errorMessage}`;
            outputPlaceholder.style.color = 'red';
            outputPlaceholder.style.display = 'block';
            outputImage.style.display = 'none';
            downloadLink.style.display = 'none';
        }


        // --- Image Preview and Drag/Drop ---
        function showPreview(file) {
            const reader = new FileReader();
            reader.onload = e => {
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
                dropText.style.display = 'none';
            };
            reader.readAsDataURL(file);
        }

        inputImage.addEventListener('change', () => {
            if (inputImage.files[0]) showPreview(inputImage.files[0]);
        });

        ['dragenter', 'dragover'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.add('drag-over');
            })
        );

        ['dragleave', 'drop'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.remove('drag-over');
            })
        );

        dropArea.addEventListener('click', () => inputImage.click());

        dropArea.addEventListener('drop', e => {
            const file = e.dataTransfer.files[0];
            if (file) {
                inputImage.files = e.dataTransfer.files;
                showPreview(file);
            }
        });

        // --- Upload Form Submission ---
        uploadForm.addEventListener('submit', function (e) {
            e.preventDefault();

            if (!inputImage.files || inputImage.files.length === 0) {
                alert('Please select an image before uploading.');
                return;
            }

            resetUIForNewUpload(); // Reset UI state for a new upload

            const formData = new FormData();
            formData.append('image', inputImage.files[0]);

            const xhr = new XMLHttpRequest();

            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';

            xhr.upload.addEventListener('progress', e => {
                if (e.lengthComputable) {
                    const percent = (e.loaded / e.total) * 100;
                    progressBar.style.width = percent + '%';
                }
            });

            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4) {
                    progressContainer.style.display = 'none';
                    if (xhr.status === 202) { // Server accepted and enqueued
                        const response = JSON.parse(xhr.responseText);
                        currentRequestId = response.requestId; // Store the received requestId
                        queueSizeSpan.textContent = response.queueSize;
                        yourPositionSpan.textContent = response.yourPosition > 0 ? response.yourPosition : 'Processing';
                        processingStatusSpan.textContent = 'Waiting for server...';

                        // Start polling for this specific request's status
                        if (!pollingIntervalId) { // Only start one interval
                            pollingIntervalId = setInterval(fetchQueueStatus, 2000); // Poll every 2 seconds
                        }
                        // Immediately fetch status after enqueuing
                        fetchQueueStatus();

                    } else { // Handle upload errors
                        alert('Upload failed: ' + xhr.responseText);
                        console.error('Upload error:', xhr.responseText);
                        displayError('Upload failed: ' + xhr.responseText);
                        currentRequestId = null; // Clear request ID on upload failure
                        clearInterval(pollingIntervalId); // Stop polling if upload fails
                        pollingIntervalId = null;
                        yourPositionSpan.textContent = 'Error';
                    }
                }
            };

            xhr.open('POST', '/upload', true);
            xhr.send(formData);
        });

        // --- Frontend Queue Polling ---
        async function fetchQueueStatus() {
            try {
                if (!currentRequestId && processingQueue.length === 0) {
                    // No active request and queue is empty, no need to poll for status.
                    // This prevents unnecessary calls when idle.
                    clearInterval(pollingIntervalId);
                    pollingIntervalId = null;
                    processingStatusSpan.textContent = 'Idle';
                    yourPositionSpan.textContent = 'N/A';
                    return;
                }


                let url = '/queue-status';
                if (currentRequestId) {
                    url += `?requestId=${currentRequestId}`; // Add requestId to the query
                }

                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                queueSizeSpan.textContent = data.queueSize;
                processingStatusSpan.textContent = data.isProcessing ? 'Busy' : 'Idle';

                // Update 'Your Position' and display output based on status
                if (currentRequestId) {
                    switch (data.status) {
                        case 'pending':
                            yourPositionSpan.textContent = `${data.yourPosition}`;
                            displayProcessingMessage(`Waiting in queue: Position ${data.yourPosition}`);
                            break;
                        case 'processing':
                            yourPositionSpan.textContent = 'Processing';
                            displayProcessingMessage('Processing your image...');
                            break;
                        case 'completed':
                            yourPositionSpan.textContent = 'Done!';
                            displayResult(data.result.outputImage);
                            currentRequestId = null; // Clear the request ID as it's done
                            clearInterval(pollingIntervalId); // Stop polling
                            pollingIntervalId = null;
                            break;
                        case 'failed':
                            yourPositionSpan.textContent = 'Error!';
                            displayError(data.result.error || 'Unknown processing error.');
                            currentRequestId = null; // Clear the request ID as it's done
                            clearInterval(pollingIntervalId); // Stop polling
                            pollingIntervalId = null;
                            break;
                        default:
                            yourPositionSpan.textContent = 'N/A';
                            break;
                    }
                } else {
                    yourPositionSpan.textContent = 'N/A'; // No active request
                }

            } catch (error) {
                console.error('Error fetching queue status:', error);
                queueSizeSpan.textContent = 'Error';
                processingStatusSpan.textContent = 'Error';
                yourPositionSpan.textContent = 'Error';
                // Consider clearing currentRequestId and stopping polling on persistent errors
                // or after a certain number of retries.
            }
        }

        // Initial fetch on page load
        fetchQueueStatus();
        // Start polling immediately if not already started, but `fetchQueueStatus`
        // itself will start `pollingIntervalId` when a request is made, and stop it
        // when idle or completed/failed.
        if (!pollingIntervalId) {
            pollingIntervalId = setInterval(fetchQueueStatus, 2000);
        }

    </script>
</body>

</html>