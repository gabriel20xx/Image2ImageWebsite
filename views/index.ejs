<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Image Nudifier</title>
    <link rel="stylesheet" href="/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
    <h1>Image Nudifier</h1>

    <form id="uploadForm" enctype="multipart/form-data">
        <p id="queueStatusDisplay">Queue: <span id="queueSize">0</span>, Status: <span
                id="processingStatus">Idle</span>, Your
            Position: <span id="yourPosition">N/A</span></p>
        <div class="main-container">
            <div class="upload-section">
                <h2>Upload Image</h2>
                <div id="dropArea" class="drop-area image-box">
                    <p id="dropText" class="placeholder">Drag & drop or click to upload</p>
                    <img id="previewImage" />
                    <input id="inputImage" type="file" name="image" accept="image/*" />
                </div>
                <button class="upload-btn" type="submit">Upload</button>
            </div>
            <div class="output-section">
                <h2>Processed Output</h2>
                <div id="outputArea" class="image-box">
                    <p id="outputPlaceholder" class="placeholder">Your processed image will appear here.</p>
                    <img id="outputImage" src="" alt="Processed Image" style="display:none;" />
                </div>
                <a id="downloadLink" href="#" download style="display:none;">
                    <button class="download-btn" type="button">Download</button>
                </a>
            </div>
        </div>
    </form>

    <div class="settings-section">
        <h2>Settings</h2>
        <p>Future filters and options will go here.</p>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const inputImage = document.getElementById('inputImage');
        const previewImage = document.getElementById('previewImage');
        const dropArea = document.getElementById('dropArea');
        const dropText = document.getElementById('dropText');
        const uploadForm = document.getElementById('uploadForm');
        // Removed progressBar and progressContainer variables as they are no longer used for display
        const outputImage = document.getElementById('outputImage');
        const outputPlaceholder = document.getElementById('outputPlaceholder');
        const downloadLink = document.getElementById('downloadLink');

        const queueSizeSpan = document.getElementById('queueSize');
        const processingStatusSpan = document.getElementById('processingStatus');
        const yourPositionSpan = document.getElementById('yourPosition');

        let currentRequestId = null;
        let pollingIntervalId = null;

        // --- Socket.IO Setup ---
        const socket = io();

        socket.on('connect', () => {
            console.log('Socket.IO: Connected to server.');
            if (currentRequestId) {
                socket.emit('joinRoom', currentRequestId);
                console.log(`Socket.IO: Rejoining room ${currentRequestId}`);
            }
        });

        socket.on('disconnect', () => {
            console.log('Socket.IO: Disconnected from server.');
        });

        // Listen for processing progress updates from the server
        socket.on('processingProgress', (progress) => {
            console.log('Socket.IO: Received processingProgress:', progress);
            if (currentRequestId && processingStatusSpan.textContent === 'Processing') {
                let percentage;
                let progressText;

                // We now assume 'progress' type with value/max is the primary source
                if (progress.type === "global_steps") {
                    percentage = Math.round((progress.value / progress.max) * 100);
                    progressText = `Processing: ${percentage}%`; // Simplified text for placeholder
                } else {
                    // Fallback, though with backend changes, this should ideally be "global_steps"
                    percentage = Math.round((progress.value / progress.max) * 100);
                    progressText = `Processing: ${percentage}%`;
                }

                if (isNaN(percentage)) {
                    console.warn('Invalid percentage received:', progress);
                    return;
                }

                // Update the outputPlaceholder directly with the progress text
                outputPlaceholder.textContent = progressText;
                outputPlaceholder.style.display = 'block'; // Ensure placeholder is visible during processing
                outputImage.style.display = 'none'; // Hide output image if it was previously shown
            }
        });

        // Listen for immediate queue updates (e.g., when your turn comes)
        socket.on('queueUpdate', (data) => {
            console.log('Socket.IO: Received queueUpdate:', data);
            queueSizeSpan.textContent = data.queueSize;
            processingStatusSpan.textContent = data.isProcessing ? 'Busy' : 'Idle';

            if (data.requestId === currentRequestId) {
                if (data.status === 'processing') {
                    yourPositionSpan.textContent = 'Processing';
                    processingStatusSpan.textContent = 'Processing';
                    outputPlaceholder.textContent = 'Processing your image...'; // Initial message
                    outputPlaceholder.style.display = 'block';
                    outputImage.style.display = 'none';
                    downloadLink.style.display = 'none';

                } else if (data.status === 'pending') {
                    yourPositionSpan.textContent = `${data.yourPosition}`;
                    processingStatusSpan.textContent = 'Waiting';
                    outputPlaceholder.textContent = `Waiting in queue: Position ${data.yourPosition}`;
                    outputPlaceholder.style.display = 'block';
                    outputImage.style.display = 'none';
                    downloadLink.style.display = 'none';
                }
            } else if (!currentRequestId && !data.isProcessing && data.queueSize === 0) {
                processingStatusSpan.textContent = 'Idle';
                yourPositionSpan.textContent = 'N/A';
                outputPlaceholder.textContent = 'Your processed image will appear here.'; // Reset to default
                outputPlaceholder.style.display = 'block';
                outputImage.style.display = 'none';
                downloadLink.style.display = 'none';
            }
        });

        // Listen for processing completion
        socket.on('processingComplete', (data) => {
            if (data.requestId === currentRequestId) {
                console.log('Socket.IO: Processing complete:', data);
                yourPositionSpan.textContent = 'Done!';
                processingStatusSpan.textContent = 'Complete';
                if (data.outputImage) {
                    displayResult(data.outputImage);
                }
                currentRequestId = null;
                if (pollingIntervalId) {
                    clearInterval(pollingIntervalId);
                    pollingIntervalId = null;
                }
            }
            fetchQueueStatus();
        });

        // Listen for processing failure
        socket.on('processingFailed', (data) => {
            if (data.requestId === currentRequestId) {
                console.error('Socket.IO: Processing failed:', data);
                yourPositionSpan.textContent = 'Error!';
                processingStatusSpan.textContent = 'Failed';
                displayError(data.errorMessage || 'Unknown processing error.');
                currentRequestId = null;
                if (pollingIntervalId) {
                    clearInterval(pollingIntervalId);
                    pollingIntervalId = null;
                }
            }
            fetchQueueStatus();
        });


        // --- UI Helper Functions ---
        function resetUIForNewUpload() {
            outputImage.style.display = 'none';
            outputImage.src = '';
            outputPlaceholder.style.display = 'block';
            outputPlaceholder.style.color = '#fff'; // Ensure placeholder text is visible
            outputPlaceholder.textContent = 'Uploading: 0%'; // Initial upload progress message
            downloadLink.style.display = 'none';
            downloadLink.href = '#';
            currentRequestId = null;
            yourPositionSpan.textContent = 'Submitting...';
            processingStatusSpan.textContent = 'Uploading...';
            queueSizeSpan.textContent = '0';

            if (pollingIntervalId) {
                clearInterval(pollingIntervalId);
                pollingIntervalId = null;
            }
        }

        // Removed displayProcessingMessage as its functionality is now merged directly into socket.on('processingProgress') and other handlers

        function displayResult(imageUrl) {
            outputImage.src = imageUrl;
            outputImage.style.display = 'block';
            outputPlaceholder.style.display = 'none'; // Hide placeholder once image is loaded

            const filename = imageUrl.split('/').pop();
            downloadLink.href = imageUrl;
            downloadLink.setAttribute('download', filename);
            downloadLink.style.display = 'inline-block';
        }

        function displayError(errorMessage) {
            outputPlaceholder.textContent = `Error: ${errorMessage}`;
            outputPlaceholder.style.color = 'red';
            outputPlaceholder.style.display = 'block';
            outputImage.style.display = 'none';
            downloadLink.style.display = 'none';
        }


        // --- Image Preview and Drag/Drop ---
        function showPreview(file) {
            const reader = new FileReader();
            reader.onload = e => {
                previewImage.src = e.target.result;
                previewImage.style.display = 'block';
                dropText.style.display = 'none';
            };
            reader.readAsDataURL(file);
        }

        inputImage.addEventListener('change', () => {
            if (inputImage.files[0]) showPreview(inputImage.files[0]);
        });

        ['dragenter', 'dragover'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.add('drag-over');
            })
        );

        ['dragleave', 'drop'].forEach(event =>
            dropArea.addEventListener(event, e => {
                e.preventDefault();
                e.stopPropagation();
                dropArea.classList.remove('drag-over');
            })
        );

        dropArea.addEventListener('click', () => inputImage.click());

        dropArea.addEventListener('drop', e => {
            const file = e.dataTransfer.files[0];
            if (file) {
                inputImage.files = e.dataTransfer.files;
                showPreview(file);
            }
        });

        // --- Upload Form Submission ---
        uploadForm.addEventListener('submit', function (e) {
            e.preventDefault();

            if (!inputImage.files || inputImage.files.length === 0) {
                alert('Please select an image before uploading.');
                return;
            }

            resetUIForNewUpload();

            const formData = new FormData();
            formData.append('image', inputImage.files[0]);

            const xhr = new XMLHttpRequest();

            xhr.upload.addEventListener('progress', e => {
                if (e.lengthComputable) {
                    const percent = (e.loaded / e.total) * 100;
                    // Update outputPlaceholder directly for upload progress
                    outputPlaceholder.textContent = `Uploading: ${Math.round(percent)}%`;
                    processingStatusSpan.textContent = 'Uploading';
                }
            });

            xhr.onreadystatechange = () => {
                if (xhr.readyState === 4) {
                    if (xhr.status === 202) {
                        const response = JSON.parse(xhr.responseText);
                        currentRequestId = response.requestId;

                        socket.emit('joinRoom', currentRequestId);
                        console.log(`Frontend: Sent 'joinRoom' for Request ID: ${currentRequestId}`);

                        queueSizeSpan.textContent = response.queueSize;
                        yourPositionSpan.textContent = response.yourPosition > 0 ? response.yourPosition : 'Processing';
                        processingStatusSpan.textContent = 'Waiting for server...';
                        outputPlaceholder.textContent = `Image uploaded. Waiting for processing.`;

                        if (!pollingIntervalId) {
                            pollingIntervalId = setInterval(fetchQueueStatus, 2000);
                        }
                        fetchQueueStatus();

                    } else {
                        alert('Upload failed: ' + xhr.responseText);
                        console.error('Upload error:', xhr.responseText);
                        displayError('Upload failed: ' + xhr.responseText);
                        currentRequestId = null;
                        if (pollingIntervalId) {
                            clearInterval(pollingIntervalId);
                            pollingIntervalId = null;
                        }
                        yourPositionSpan.textContent = 'Error';
                        processingStatusSpan.textContent = 'Failed';
                    }
                }
            };

            xhr.open('POST', '/upload', true);
            xhr.send(formData);
        });

        // --- Frontend Queue Polling ---
        async function fetchQueueStatus() {
            try {
                let url = '/queue-status';
                if (currentRequestId) {
                    url += `?requestId=${currentRequestId}`;
                }

                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                // console.log('Polling queue status:', data);

                queueSizeSpan.textContent = data.queueSize;
                processingStatusSpan.textContent = data.isProcessing ? 'Busy' : 'Idle';

                if (currentRequestId) {
                    if (data.requestId === currentRequestId || data.yourPosition !== -1 || data.status === 'processing' || data.status === 'completed' || data.status === 'failed') {
                        switch (data.status) {
                            case 'pending':
                                yourPositionSpan.textContent = `${data.yourPosition}`;
                                outputPlaceholder.textContent = `Waiting in queue: Position ${data.yourPosition}`;
                                outputPlaceholder.style.display = 'block';
                                outputImage.style.display = 'none';
                                downloadLink.style.display = 'none';
                                break;
                            case 'processing':
                                yourPositionSpan.textContent = 'Processing';
                                outputPlaceholder.textContent = 'Processing your image...'; // Initial message before Socket.IO kicks in
                                outputPlaceholder.style.display = 'block';
                                outputImage.style.display = 'none';
                                downloadLink.style.display = 'none';
                                break;
                            case 'completed':
                                yourPositionSpan.textContent = 'Done!';
                                displayResult(data.result.outputImage);
                                currentRequestId = null;
                                if (pollingIntervalId) {
                                    clearInterval(pollingIntervalId);
                                    pollingIntervalId = null;
                                }
                                break;
                            case 'failed':
                                yourPositionSpan.textContent = 'Error!';
                                displayError(data.result.errorMessage || 'Unknown processing error.');
                                currentRequestId = null;
                                if (pollingIntervalId) {
                                    clearInterval(pollingIntervalId);
                                    pollingIntervalId = null;
                                }
                                break;
                            default:
                                yourPositionSpan.textContent = 'N/A';
                                break;
                        }
                    }
                } else {
                    yourPositionSpan.textContent = 'N/A';
                    if (!data.isProcessing && data.queueSize === 0) {
                        processingStatusSpan.textContent = 'Idle';
                        outputPlaceholder.textContent = 'Your processed image will appear here.'; // Reset to default
                        outputPlaceholder.style.display = 'block';
                        outputImage.style.display = 'none';
                        downloadLink.style.display = 'none';
                        if (pollingIntervalId) {
                            clearInterval(pollingIntervalId);
                            pollingIntervalId = null;
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching queue status:', error);
                if (currentRequestId) {
                    queueSizeSpan.textContent = 'Error';
                    processingStatusSpan.textContent = 'Error';
                    yourPositionSpan.textContent = 'Error';
                    displayError('Failed to get status. Please check connection.');
                    if (pollingIntervalId) {
                        clearInterval(pollingIntervalId);
                        pollingIntervalId = null;
                    }
                }
            }
        }

        fetchQueueStatus();
        if (!pollingIntervalId) {
            pollingIntervalId = setInterval(fetchQueueStatus, 2000);
        }
    </script>
</body>

</html>